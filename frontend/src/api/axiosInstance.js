// src/api/axiosInstance.js
import axios from "axios";

// üîß T·∫°o axios instance g·ªëc
const API = axios.create({
  baseURL: process.env.REACT_APP_API_URL || "http://localhost:5000/api",
  timeout: 15000,
});

// ü™ô G·∫Øn Access Token v√†o m·ªçi request
API.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) config.headers.Authorization = `Bearer ${token}`;
    return config;
  },
  (error) => Promise.reject(error)
);

// ‚ôªÔ∏è X·ª≠ l√Ω t·ª± refresh Access Token khi h·∫øt h·∫°n
API.interceptors.response.use(
  (res) => res,
  async (error) => {
    const originalRequest = error.config;

    // N·∫øu backend tr·∫£ l·ªói 403 ‚Üí Access Token h·∫øt h·∫°n
    if (error.response?.status === 403 && !originalRequest._retry) {
      originalRequest._retry = true;
      const refreshToken = localStorage.getItem("refreshToken");

      // N·∫øu kh√¥ng c√≥ refreshToken ‚Üí logout
      if (!refreshToken) {
        localStorage.clear();
        window.location.href = "/login";
        return Promise.reject(error);
      }

      try {
        // üîÑ G·ª≠i request l√†m m·ªõi token
        const response = await axios.post(
          `${process.env.REACT_APP_API_URL || "http://localhost:5000/api"}/auth/refresh`,
          { refreshToken }
        );

        const newAccessToken = response.data.accessToken;
        if (!newAccessToken) throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c accessToken m·ªõi!");

        // ‚úÖ L∆∞u Access Token m·ªõi v√† g·∫Øn l·∫°i header
        localStorage.setItem("token", newAccessToken);
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;

        // G·ª≠i l·∫°i request ban ƒë·∫ßu
        return axios(originalRequest);
      } catch (refreshError) {
        console.error("‚ùå Refresh token kh√¥ng h·ª£p l·ªá, bu·ªôc logout:", refreshError.message);
        localStorage.clear();
        window.location.href = "/login";
      }
    }

    return Promise.reject(error);
  }
);

export default API;
